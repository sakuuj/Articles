name: articles

services:

  api_gateway:
    image: nginx:1.27.2-alpine
    volumes:
      - ../front-end/build/:/data/
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - net_nginx
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 100mb

  article_service:
    hostname: article-service
    depends_on:
      - postgres_master
      - temporal
      - kafka-broker
      - person_service
      - elastic_search
    restart: unless-stopped
    build:
      context: ../
      dockerfile: Dockerfile-articleService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - net_pg
      - net_es
      - net_kafka
      - net_temporal
      - temporal-internal
      - net_ms
      - net_nginx
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1gb
#    ports:
#      - "127.0.0.1:9000:8080"


  kafka_es_consumer:
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      - kafka-broker
      - elastic_search
    build:
      context: ../
      dockerfile: Dockerfile-kafka-es-consumer
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 500mb
    restart: unless-stopped
    networks:
      - net_kafka
      - net_es

  person_service:
    hostname: "person-service"
    depends_on:
      - postgres_master
    restart: unless-stopped
    build:
      context: ../
      dockerfile: Dockerfile-personService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 500mb
    networks:
      - net_pg
      - net_ms

  postgres_master:
    container_name: postgres_master_articles
    image: postgres:16.4
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    ports:
      - "127.0.0.1:5432:5432"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 300mb
    restart: unless-stopped
    networks:
      - net_pg


  kafka-broker:
    container_name: kafka-broker-articles
    image: apache/kafka:3.8.0
    hostname: broker-articles
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://broker-articles:9092,PLAINTEXT://broker-articles:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker-articles:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_MIN_INSYNC_REPLICAS: 1
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1gb
    restart: unless-stopped
    networks:
      - net_kafka

  elastic_search:
    container_name: elasticsearch-articles
    image: elasticsearch:8.14.3
    environment:
      - ELASTIC_PASSWORD=elastic
      - ES_SETTING_DISCOVERY_TYPE=single-node
      - ES_SETTING_XPACK_SECURITY_HTTP_SSL_ENABLED=false
      - ES_SETTING_XPACK_LICENSE_SELF__GENERATED_TYPE=basic
    ports:
      - 127.0.0.1:9200:9200
    networks:
      - net_es
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
      - elastic_logs:/usr/share/elasticsearch/logs
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2gb
    restart: unless-stopped



  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${TEMPORAL_POSTGRESQL_VERSION}
    networks:
      - temporal-internal
    volumes:
      - /var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 300mb
    restart: unless-stopped



  temporal:
    hostname: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-internal
      - net_temporal
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 300mb
    restart: unless-stopped



  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - net_temporal
    ports:
      - 8081:8080
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 100mb
    restart: unless-stopped


volumes:
  elastic_data:
  elastic_logs:

networks:
  net_es:
  net_pg:
  net_ms:
  net_kafka:
  net_temporal:
  net_nginx:
  temporal-internal:

